name: CI

on:
  push:
    branches:
      - master
      - "!dependabot/**"
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Daily at midnight UTC

permissions:
  contents: read

jobs:
  test:
    name: Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest]
        include:
          - os: macos-latest
            python: '3.8'
          - os: macos-latest
            python: '3.12'
          - os: windows-latest
            python: '3.8'
          - os: windows-latest
            python: '3.12'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # To ensure full git history for tags/commits
          persist-credentials: false

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: pip

      - name: Print Python and pip version
        run: |
          python --version
          pip --version

      - name: Upgrade pip & install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run lint (flake8)
        run: flake8 .
        continue-on-error: true # Don't fail on lint errors; report instead

      - name: Run makeBlackhole.py
        run: python makeBlackhole.py

      - name: Run tests
        run: |
          set -euo pipefail
          python testUpdateBlackholeFile.py

      - name: Upload test results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python }}
          path: |
            **/test-results*.xml
            **/coverage*.xml
            **/.pytest_cache
            **/.coverage*

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: '**/coverage*.xml'
          flags: ${{ matrix.os }}-${{ matrix.python }}
          fail_ci_if_error: false

      - name: Cleanup Python artifacts (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          rm -rf .pytest_cache .coverage* **/__pycache__

      - name: Cleanup Python artifacts (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force .pytest_cache, **\__pycache__
          Get-ChildItem -Path . -Recurse -Include .coverage* | Remove-Item -Force
